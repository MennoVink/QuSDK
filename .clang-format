---
#Dont specify a language, that makes the options the default for all languages, which is
#what we need to support objective-c formatting
#Language:        Cpp
# Based on clang-format version 9.0.0
AccessModifierOffset: -4
AlignAfterOpenBracket: Align
#TODO: We want consecutive assignments in enums to be aligned, but not for normal variables. We can only either align all of them
#or none. For now we're chosing to align neither because being able to read enum values is less important than reading variables.
AlignConsecutiveAssignments: false
AlignConsecutiveDeclarations: false
AlignConsecutiveMacros: false
AlignEscapedNewlines: Right
AlignOperands: true
#TODO: The comment aligning behaviour is kind of nasty. We'd prefer if multiple blocks of comments in headers
#are all aligned at the same position, instead this aligns each block individually. It would also be preferrable if
#there's at least some whitespace in between the code and the comments. The alternative of disabling this is really not
#an option because it'll put the comments in between code when there's blocks with lines of varying length
AlignTrailingComments: true
AllowAllArgumentsOnNextLine: false
#No effect due to ConstructorInitializerAllOnOneLineOrOnePerLine being disabled
#AllowAllConstructorInitializersOnNextLine: true
AllowAllParametersOfDeclarationOnNextLine: false
#Not supported in clang-format 9.0.0
#AllowShortBlocksOnASingleLine: Never
AllowShortCaseLabelsOnASingleLine: false
AllowShortFunctionsOnASingleLine: None
AllowShortIfStatementsOnASingleLine: Never
AllowShortLambdasOnASingleLine: Empty
AllowShortLoopsOnASingleLine: false
#Deprecated
#AlwaysBreakAfterDefinitionReturnType: None
AlwaysBreakAfterReturnType: None
AlwaysBreakBeforeMultilineStrings: false
AlwaysBreakTemplateDeclarations: Yes
BinPackArguments: true
#Only supported in JavaScript when BinPackArguments is disabled
#InsertTrailingCommas: None
BinPackParameters: true
#Braces match Allman except for lambdas
BraceWrapping:
  AfterCaseLabel: true
  AfterClass: true
#Mutliple choice not available in clang-format 9.0.0
#  AfterControlStatement: Always
  AfterControlStatement: true
  AfterEnum: true
  AfterFunction: true
  AfterNamespace: true
  AfterObjCDeclaration: true
  AfterStruct: true
  AfterUnion: true
  AfterExternBlock: true
  BeforeCatch: true
  BeforeElse: true
#Not supported in clang-format 9.0.0
#  BeforeLambdaBody: false
  IndentBraces: false
  SplitEmptyFunction: true
  SplitEmptyRecord: true
  SplitEmptyNamespace: true
#Java specific option
#BreakAfterJavaFieldAnnotations: true
BreakBeforeBinaryOperators: None
BreakBeforeBraces: Custom
BreakBeforeTernaryOperators: false
BreakConstructorInitializers: AfterColon
BreakInheritanceList: AfterColon
BreakStringLiterals: false
#Unknown options according to clang.llvm.org
#BreakBeforeInheritanceComma: false
#BreakConstructorInitializersBeforeComma: false
ColumnLimit: 0
#CommentPragmas:  '^ IWYU pragma:'
CompactNamespaces: false
ConstructorInitializerAllOnOneLineOrOnePerLine: false
ConstructorInitializerIndentWidth: 4
ContinuationIndentWidth: 4
Cpp11BracedListStyle: false
#Not supported in clang-format 9.0.0
#DeriveLineEnding: false
DerivePointerAlignment: false
DisableFormat: false
#Experimental setting that may not be supported in the future
ExperimentalAutoDetectBinPacking: false
FixNamespaceComments: true
ForEachMacros:
  - foreach
IncludeBlocks: Preserve
#Not supported in clang-format 9.0.0
#IndentCaseBlocks: false
IndentCaseLabels: false
#Not supported in clang-format 9.0.0
#IndentGotoLabels: false
IndentPPDirectives: AfterHash
IndentWidth: 4
IndentWrappedFunctionNames: true
#JavaImportGroups: []
JavaScriptQuotes: Double
JavaScriptWrapImports: false
#Must be true due to newline in namespace scope open
KeepEmptyLinesAtTheStartOfBlocks: true
MacroBlockBegin: ''
MacroBlockEnd: ''
MaxEmptyLinesToKeep: 2
NamespaceIndentation: None
#NamespaceMacros
ObjCBinPackProtocolList: Always
ObjCBlockIndentWidth : 4
#Not supported in clang-format 9.0.0
#ObjCBreakBeforeNestedBlockParam: true
ObjCSpaceAfterProperty: false
ObjCSpaceBeforeProtocolList: false
PenaltyBreakAssignment: 0
PenaltyBreakBeforeFirstCallParameter: 0
PenaltyBreakComment: 0
PenaltyBreakFirstLessLess: 0
PenaltyBreakString: 0
PenaltyBreakTemplateDeclaration: 0
PenaltyExcessCharacter: 0
PenaltyReturnTypeOnItsOwnLine: 0
PointerAlignment: Left
#RawStringFormats
ReflowComments: false
SortIncludes: false
SortUsingDeclarations: false
SpaceAfterCStyleCast: false
SpaceAfterLogicalNot: false
SpaceAfterTemplateKeyword: false
SpaceBeforeAssignmentOperators: true
SpaceBeforeCpp11BracedList: false
SpaceBeforeCtorInitializerColon: true
SpaceBeforeInheritanceColon: true
SpaceBeforeParens: Never
SpaceBeforeRangeBasedForLoopColon: true
#Not supported in clang-format 9.0.0
#SpaceBeforeSquareBrackets: false
#Not supported in clang-format 9.0.0
#SpaceInEmptyBlock: false
SpaceInEmptyParentheses: false
SpacesBeforeTrailingComments: 1
SpacesInAngles: true
SpacesInCStyleCastParentheses: false
#Not supported in clang-format 9.0.0
#SpacesInConditionalStatement: true
SpacesInContainerLiterals: true
#TODO: Would be nice if we could use spaces for functions but not for explicit math operator ordering.
SpacesInParentheses: true
SpacesInSquareBrackets: true
Standard: Cpp11
TabWidth: 4
#We'd like to use tabs for initializer lists, but enabling tabs for continuation also
#causes multiple lines of function (including constructor) arguments to be indented using tabs.
#This is undesirable as that actually happens quite a lot (eg when initializing a 4x4 matrix)
UseTab: ForIndentation
